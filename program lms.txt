    LIBRARY MANAGEMENT SYSTEM   
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_BOOKS 100

// Structure to represent a book
struct Book {
    char title[50];
    char author[50];
    int pages;
    float price;
};

// Function prototypes
void addBook(struct Book[], int *);
void displayBooks(struct Book[], int);
void searchByAuthor(struct Book[], int, char[]);
void searchByTitle(struct Book[], int, char[]);
void deleteBook(struct Book[], int *, char[]);
void sortByTitle(struct Book[], int);
void sortByAuthor(struct Book[], int);
void sortByPrice(struct Book[], int);

int main() {
    struct Book library[MAX_BOOKS];
    int bookCount = 0;
    int choice;
    char author[50];
    char title[50];

    while (1) {
        printf("\n\n****######"
               "WELCOME TO E-LIBRARY "
               "#####****\n");
        printf("\n1. Add book\n"
               "2. Display all books\n"
               "3. Search by author\n"
               "4. Search by title\n"
               "5. Delete a book\n"
               "6. Sort by title\n"
               "7. Sort by author\n"
               "8. Sort by price\n"
               "9. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addBook(library, &bookCount);
                break;
            case 2:
                displayBooks(library, bookCount);
                break;
            case 3:
                printf("Enter author name: ");
                scanf("%s", author);
                searchByAuthor(library, bookCount, author);
                break;
            case 4:
                printf("Enter book title: ");
                scanf("%s", title);
                searchByTitle(library, bookCount, title);
                break;
            case 5:
                printf("Enter the title of the book to delete: ");
                scanf("%s", title);
                deleteBook(library, &bookCount, title);
                break;
            case 6:
                sortByTitle(library, bookCount);
                break;
            case 7:
                sortByAuthor(library, bookCount);
                break;
            case 8:
                sortByPrice(library, bookCount);
                break;
            case 9:
                exit(0);
            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}

// Function to add a book to the library
void addBook(struct Book library[], int *count) {
    if (*count < MAX_BOOKS) {
        printf("Enter book title: ");
        scanf("%s", library[*count].title);
        printf("Enter author name: ");
        scanf("%s", library[*count].author);
        printf("Enter number of pages: ");
        scanf("%d", &library[*count].pages);
        printf("Enter price: ");
        scanf("%f", &library[*count].price);
        (*count)++;
        printf("Book added successfully!\n");
    } else {
        printf("Library is full!\n");
    }
}

// Function to display all books in the library
void displayBooks(struct Book library[], int count) {
    if (count == 0) {
        printf("Library is empty!\n");
    } else {
        printf("Books in the library:\n");
        for (int i = 0; i < count; i++) {
            printf("%s by %s, %d pages, $%.2f\n",
                   library[i].title, library[i].author,
                   library[i].pages, library[i].price);
        }
    }
}

// Function to search for books by author
void searchByAuthor(struct Book library[], int count, char author[]) {
    int found = 0;
    for (int i = 0; i < count; i++) {
        if (strcmp(library[i].author, author) == 0) {
            printf("%s by %s, %d pages, $%.2f\n",
                   library[i].title, library[i].author,
                   library[i].pages, library[i].price);
            found = 1;
        }
    }
    if (!found) {
        printf("No books found for author %s\n", author);
    }
}

// Function to search for books by title
void searchByTitle(struct Book library[], int count, char title[]) {
    int found = 0;
    for (int i = 0; i < count; i++) {
        if (strcmp(library[i].title, title) == 0) {
            printf("%s by %s, %d pages, $%.2f\n",
                   library[i].title, library[i].author,
                   library[i].pages, library[i].price);
            found = 1;
            break;
        }
    }
    if (!found) {
        printf("No book found with title %s\n", title);
    }
}

// Function to delete a book by title
void deleteBook(struct Book library[], int *count, char title[]) {
    int found = 0;
    for (int i = 0; i < *count; i++) {
        if (strcmp(library[i].title, title) == 0) {
            found = 1;
            for (int j = i; j < *count - 1; j++) {
                library[j] = library[j + 1];
            }
            (*count)--;
            printf("Book deleted successfully!\n");
            break;
        }
    }
    if (!found) {
        printf("No book found with title %s\n", title);
    }
}

// Function to sort books by title
void sortByTitle(struct Book library[], int count) {
    struct Book temp;
    for (int i = 0; i < count - 1; i++) {
        for (int j = 0; j < count - i - 1; j++) {
            if (strcmp(library[j].title, library[j + 1].title) > 0) {
                temp = library[j];
                library[j] = library[j + 1];
                library[j + 1] = temp;
            }
        }
    }
    printf("Books sorted by title!\n");
}

// Function to sort books by author
void sortByAuthor(struct Book library[], int count) {
    struct Book temp;
    for (int i = 0; i < count - 1; i++) {
        for (int j = 0; j < count - i - 1; j++) {
            if (strcmp(library[j].author, library[j + 1].author) > 0) {
                temp = library[j];
                library[j] = library[j + 1];
                library[j + 1] = temp;
            }
        }
    }
    printf("Books sorted by author!\n");
}

// Function to sort books by price
void sortByPrice(struct Book library[], int count) {
    struct Book temp;
    for (int i = 0; i < count - 1; i++) {
        for (int j = 0; j < count - i - 1; j++) {
            if (library[j].price > library[j + 1].price) {
                temp = library[j];
                library[j] = library[j + 1];
                library[j + 1] = temp;
            }
        }
    }
    printf("Books sorted by price!\n");
}

